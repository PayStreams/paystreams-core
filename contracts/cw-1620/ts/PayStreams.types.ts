/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  count: number;
}
export type ExecuteMsg = {
  create_stream: {
    curve?: Curve | null;
    deposit: Uint128;
    recipient: string;
    start_time: Timestamp;
    stop_time: Timestamp;
    stream_type?: StreamType | null;
    token_addr: string;
  };
} | {
  withdraw_from_stream: {
    amount: Uint128;
    denom: string;
    recipient: string;
    stream_idx?: number | null;
  };
};
export type Curve = {
  constant: {
    y: Uint128;
    [k: string]: unknown;
  };
} | {
  saturating_linear: SaturatingLinear;
} | {
  piecewise_linear: PiecewiseLinear;
};
export type Uint128 = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export type StreamType = "basic" | "linear_curve_based" | "cliff_curve_based" | "dynamic_curve_based" | "exponential_curve_based" | "exponential_curve_based_with_cliff" | "traditional_unlock_step_curve";
export interface SaturatingLinear {
  max_x: number;
  max_y: Uint128;
  min_x: number;
  min_y: Uint128;
  [k: string]: unknown;
}
export interface PiecewiseLinear {
  steps: [number, Uint128][];
  [k: string]: unknown;
}
export type QueryMsg = {
  lookup_stream: {
    payee: string;
    payer: string;
  };
} | {
  stream_count: {};
} | {
  streams_by_payee: {
    limit?: number | null;
    payee: string;
    reverse?: boolean | null;
  };
} | {
  streams_by_sender: {
    limit?: number | null;
    reverse?: boolean | null;
    sender: string;
  };
} | {
  streams_by_index: {
    index: number;
  };
};
export type Addr = string;
export interface LookupStreamResponse {
  stream: PaymentStream;
}
export interface PaymentStream {
  curve?: Curve | null;
  deposit: Uint128;
  is_entity: boolean;
  rate_per_second: Uint128;
  recipient: Addr;
  remaining_balance: Uint128;
  sender: Addr;
  start_time: Timestamp;
  stop_time: Timestamp;
  stream_idx: number;
  token_addr: Addr;
  [k: string]: unknown;
}
export interface CountResponse {
  count: number;
}
export interface StreamsResponse {
  streams: PaymentStream[];
}